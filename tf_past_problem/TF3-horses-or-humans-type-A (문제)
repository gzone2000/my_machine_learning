{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TF3-horses-or-humans-type-A (문제)","provenance":[{"file_id":"1IuKmQZKMyyz7pQFdruwFAGakAWCsQf1H","timestamp":1598949833979}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"mu7pxlNfX5PZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599124554551,"user_tz":-540,"elapsed":99960,"user":{"displayName":"yunwoo oh","photoUrl":"","userId":"01035531558844683999"}},"outputId":"89991c98-3b1c-4e9d-fc57-cb1d90aa2cca"},"source":["# ======================================================================\n","# There are 5 questions in this test with increasing difficulty from 1-5\n","# Please note that the weight of the grade for the question is relative\n","# to its difficulty. So your Category 1 question will score much less\n","# than your Category 5 question.\n","# ======================================================================\n","#\n","# Computer Vision with CNNs\n","#\n","# This task requires you to create a classifier for horses or humans using\n","# the provided dataset. \n","#\n","# Please make sure your final layer has 2 neurons, activated by softmax \n","# as shown. Do not change the provided output layer, or tests may fail.\n","#\n","# IMPORTANT: Please note that the test uses images that are 300x300 with \n","# 3 bytes color depth so be sure to design your input layer to accept\n","# these, or the tests will fail.\n","#\n","\n","# =================================================== #\n","# =================================================== #\n","# ====== 모델링 할 때는 포함, 시험 볼때는 제거 ====== #\n","# 텐서플로우 버전 충돌로 인하여 \n","# 반드시 tensorflow 버전을 2.1.0 버전 설치 후 \n","# 모델작업 진행 해주셔야 합니다.\n","# 시험보실 때는 아래 \n","# !pip install tensorflow==2.1.0 명령어 필요 없습니다\n","# 텐서플로우 2.1.0 버전 재설치 코드\n","#!pip install tensorflow==2.1.0\n","\n","# ====== 모델링 할 때는 포함, 시험 볼때는 제거 ====== #\n","# =================================================== #\n","\n","# =========== 합격 기준 가이드라인 공유 ============= #\n","# val_loss 기준에 맞춰 주시는 것이 훨씬 더 중요 #\n","# val_loss 보다 조금 높아도 상관없음. (언저리까지 OK) #\n","# =================================================== #\n","# 문제명: Category 3 - Horses Or Humans type A\n","# val_loss: 0.028\n","# val_acc: 0.98\n","# =================================================== #\n","# =================================================== #\n","\n","\n","import tensorflow_datasets as tfds\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Flatten, Dropout, Conv2D, MaxPooling2D\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","\n","dataset_name = 'horses_or_humans'\n","train_dataset = tfds.load(dataset_name, split='train[:80%]')\n","valid_dataset = tfds.load(dataset_name, split='train[80%:]')\n","#train_dataset = tfds.load(name=dataset_name, split='train')\n","#valid_dataset = tfds.load(name=dataset_name, split='test')\n","\n","\n","def preprocess(data):\n","    # YOUR CODE HERE\n","    x = data['image']\n","    x = x / 255\n","    y = data['label']\n","    y = tf.one_hot(y, 2)\n","    return x, y\n","\n","def solution_model():\n","\n","    batch_size=32\n","    train_data = train_dataset.map(preprocess).batch(batch_size)\n","    valid_data = valid_dataset.map(preprocess).batch(batch_size)\n","\n","    model = Sequential([\n","        Conv2D(16, (3, 3), activation='relu', input_shape=(300, 300, 3)),\n","        MaxPooling2D(2, 2), \n","        Conv2D(32, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2), \n","        Conv2D(64, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2), \n","        Conv2D(64, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2),\n","        Conv2D(64, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2), \n","        Flatten(), \n","        Dropout(0.5),\n","        Dense(512, activation='relu'),\n","        Dense(64, activation='relu'), \n","    # YOUR CODE HERE, BUT MAKE SURE YOUR LAST LAYER HAS 2 NEURONS ACTIVATED BY SOFTMAX\n","        tf.keras.layers.Dense(2, activation='softmax')\n","    ])\n","    model.summary()\n","    model.compile(optimizer='adam',\n","                  loss='categorical_crossentropy',\n","                  metrics=['acc'],\n","                  )\n","    checkpoint_path = 'my_checkpint.ckpt'\n","    checkpoint = ModelCheckpoint(checkpoint_path,\n","                                 save_weights_only=True,\n","                                 save_best_only=True,\n","                                 monitor='val_loss',\n","                                 verbose=1,\n","                                 )\n","    model.fit(train_data,\n","              validation_data=(valid_data),\n","              epochs=20,\n","              callbacks=[checkpoint],\n","              )\n","    \n","    model.load_weights(checkpoint_path)\n","\n","    return model\n","\n","\n","# Note that you'll need to save your model as a .h5 like this\n","# This .h5 will be uploaded to the testing infrastructure\n","# and a score will be returned to you\n","if __name__ == '__main__':\n","    model = solution_model()\n","    model.save(\"TF3-horses-or-humans-type-A.h5\")\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_10 (Conv2D)           (None, 298, 298, 16)      448       \n","_________________________________________________________________\n","max_pooling2d_10 (MaxPooling (None, 149, 149, 16)      0         \n","_________________________________________________________________\n","conv2d_11 (Conv2D)           (None, 147, 147, 32)      4640      \n","_________________________________________________________________\n","max_pooling2d_11 (MaxPooling (None, 73, 73, 32)        0         \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 71, 71, 64)        18496     \n","_________________________________________________________________\n","max_pooling2d_12 (MaxPooling (None, 35, 35, 64)        0         \n","_________________________________________________________________\n","conv2d_13 (Conv2D)           (None, 33, 33, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_13 (MaxPooling (None, 16, 16, 64)        0         \n","_________________________________________________________________\n","conv2d_14 (Conv2D)           (None, 14, 14, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_14 (MaxPooling (None, 7, 7, 64)          0         \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 3136)              0         \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 3136)              0         \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 512)               1606144   \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 64)                32832     \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 2)                 130       \n","=================================================================\n","Total params: 1,736,546\n","Trainable params: 1,736,546\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","     26/Unknown - 4s 139ms/step - loss: 0.4083 - acc: 0.8139\n","Epoch 00001: val_loss improved from inf to 0.29912, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 186ms/step - loss: 0.4083 - acc: 0.8139 - val_loss: 0.2991 - val_acc: 0.8878\n","Epoch 2/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1572 - acc: 0.9404\n","Epoch 00002: val_loss improved from 0.29912 to 0.08283, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 184ms/step - loss: 0.1572 - acc: 0.9404 - val_loss: 0.0828 - val_acc: 0.9707\n","Epoch 3/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0918 - acc: 0.9647\n","Epoch 00003: val_loss did not improve from 0.08283\n","26/26 [==============================] - 5s 179ms/step - loss: 0.0918 - acc: 0.9647 - val_loss: 0.1008 - val_acc: 0.9561\n","Epoch 4/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0508 - acc: 0.9781\n","Epoch 00004: val_loss improved from 0.08283 to 0.04014, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 182ms/step - loss: 0.0508 - acc: 0.9781 - val_loss: 0.0401 - val_acc: 0.9902\n","Epoch 5/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0213 - acc: 0.9939\n","Epoch 00005: val_loss improved from 0.04014 to 0.03798, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 181ms/step - loss: 0.0213 - acc: 0.9939 - val_loss: 0.0380 - val_acc: 0.9902\n","Epoch 6/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0416 - acc: 0.9854\n","Epoch 00006: val_loss did not improve from 0.03798\n","26/26 [==============================] - 5s 181ms/step - loss: 0.0416 - acc: 0.9854 - val_loss: 0.0702 - val_acc: 0.9854\n","Epoch 7/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0429 - acc: 0.9866\n","Epoch 00007: val_loss improved from 0.03798 to 0.02877, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 181ms/step - loss: 0.0429 - acc: 0.9866 - val_loss: 0.0288 - val_acc: 0.9902\n","Epoch 8/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0272 - acc: 0.9915\n","Epoch 00008: val_loss improved from 0.02877 to 0.02482, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 181ms/step - loss: 0.0272 - acc: 0.9915 - val_loss: 0.0248 - val_acc: 0.9951\n","Epoch 9/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0096 - acc: 0.9964\n","Epoch 00009: val_loss improved from 0.02482 to 0.00183, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 181ms/step - loss: 0.0096 - acc: 0.9964 - val_loss: 0.0018 - val_acc: 1.0000\n","Epoch 10/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0085 - acc: 0.9964\n","Epoch 00010: val_loss did not improve from 0.00183\n","26/26 [==============================] - 5s 180ms/step - loss: 0.0085 - acc: 0.9964 - val_loss: 0.0059 - val_acc: 0.9951\n","Epoch 11/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0014 - acc: 1.0000\n","Epoch 00011: val_loss did not improve from 0.00183\n","26/26 [==============================] - 5s 180ms/step - loss: 0.0014 - acc: 1.0000 - val_loss: 0.0037 - val_acc: 1.0000\n","Epoch 12/20\n","26/26 [==============================] - ETA: 0s - loss: 4.0560e-04 - acc: 1.0000\n","Epoch 00012: val_loss improved from 0.00183 to 0.00023, saving model to my_checkpint.ckpt\n","26/26 [==============================] - 5s 183ms/step - loss: 4.0560e-04 - acc: 1.0000 - val_loss: 2.3308e-04 - val_acc: 1.0000\n","Epoch 13/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0070 - acc: 0.9976\n","Epoch 00013: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 179ms/step - loss: 0.0070 - acc: 0.9976 - val_loss: 0.0069 - val_acc: 0.9951\n","Epoch 14/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0022 - acc: 1.0000\n","Epoch 00014: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 179ms/step - loss: 0.0022 - acc: 1.0000 - val_loss: 9.4337e-04 - val_acc: 1.0000\n","Epoch 15/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0060 - acc: 0.9964\n","Epoch 00015: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 178ms/step - loss: 0.0060 - acc: 0.9964 - val_loss: 0.0448 - val_acc: 0.9951\n","Epoch 16/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1332 - acc: 0.9732\n","Epoch 00016: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 177ms/step - loss: 0.1332 - acc: 0.9732 - val_loss: 0.2410 - val_acc: 0.8878\n","Epoch 17/20\n","26/26 [==============================] - ETA: 0s - loss: 0.1513 - acc: 0.9367\n","Epoch 00017: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 178ms/step - loss: 0.1513 - acc: 0.9367 - val_loss: 0.0256 - val_acc: 0.9951\n","Epoch 18/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0215 - acc: 0.9951\n","Epoch 00018: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 177ms/step - loss: 0.0215 - acc: 0.9951 - val_loss: 0.1036 - val_acc: 0.9463\n","Epoch 19/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0247 - acc: 0.9891\n","Epoch 00019: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 178ms/step - loss: 0.0247 - acc: 0.9891 - val_loss: 0.1073 - val_acc: 0.9707\n","Epoch 20/20\n","26/26 [==============================] - ETA: 0s - loss: 0.0330 - acc: 0.9891\n","Epoch 00020: val_loss did not improve from 0.00023\n","26/26 [==============================] - 5s 173ms/step - loss: 0.0330 - acc: 0.9891 - val_loss: 0.0299 - val_acc: 0.9902\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LGvOqJXRPK5X","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}